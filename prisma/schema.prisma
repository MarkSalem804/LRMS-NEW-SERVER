// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  firstName  String
  lastName   String
  role       String
  age        Int?
  birthdate  DateTime?
  middleName String?
  isActive   Boolean   @default(true)
  isChanged  Boolean   @default(false)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  profile    profile[]
}

model profile {
  id           Int        @id @default(autoincrement())
  userId       Int?
  user         user?      @relation(fields: [userId], references: [id])
  address      String?    @db.Text
  firstName    String?
  lastName     String?
  middleName   String?
  age          Int?
  birthdate    DateTime?
  phoneNumber  String?
  emailAddress String?
  role         String
  employeeId   String?
  positionId   Int?
  position     positions? @relation(fields: [positionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model positions {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  profile     profile[]
}

model learningAreas {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  materials   materials[]
}

model gradeLevels {
  id          Int         @id @default(autoincrement())
  name        String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  materials   materials[]
}

model materials {
  id             Int            @id @default(autoincrement())
  title          String?
  gradeLevelId   Int?
  gradeLevel     gradeLevels?   @relation(fields: [gradeLevelId], references: [id])
  learningAreaId Int?
  learningArea   learningAreas? @relation(fields: [learningAreaId], references: [id])
  description    String?
  uploadedAt     DateTime
  downloads      Int?
  rating         Float?
  intendedUsers  String?
  topic          String?
  language       String?
  objective      String?
  educationType  String?
  track          track?         @relation(fields: [trackId], references: [id])
  trackId        Int?
  component      component?     @relation(fields: [componentId], references: [id])
  componentId    Int?
  strand         strand?        @relation(fields: [strandId], references: [id])
  strandId       Int?
  type           type?          @relation(fields: [typeId], references: [id])
  typeId         Int?
  subjectType    subjectType?   @relation(fields: [subjectTypeId], references: [id])
  subjectTypeId  Int?
}

model subjectType {
  id        Int         @id @default(autoincrement())
  name      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  materials materials[]
}

model track {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  materials           materials[]
  strand              strand[]
  specializedSubjects specializedSubjects[]
  appliedSubjects     appliedSubjects[]
}

model component {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  materials   materials[]
}

model strand {
  id                  Int                   @id @default(autoincrement())
  name                String
  trackId             Int?
  track               track?                @relation(fields: [trackId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  materials           materials[]
  specializedSubjects specializedSubjects[]
}

model type {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  materials   materials[]
}

model specializedSubjects {
  id       Int     @id @default(autoincrement())
  name     String?
  trackId  Int?
  strandId Int?
  strand   strand? @relation(fields: [strandId], references: [id])
  track    track?  @relation(fields: [trackId], references: [id])
}

model appliedSubjects {
  id      Int     @id @default(autoincrement())
  name    String?
  trackId Int?
  track   track?  @relation(fields: [trackId], references: [id])
}

model coreSubjects {
  id   Int     @id @default(autoincrement())
  name String?
}
